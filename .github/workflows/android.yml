name: Build & Publish Debug APK
on:
  push:
    tags:
      - v[1-9]+.[0-9]+.[0-9]+
jobs:
  build:
    runs-on: ubuntu-latest
      # outputs:
      # version: ${{ steps.step_version.outputs.version }}
    # upload_url: ${{ steps.step_upload_url.outputs.upload_url }}
    steps:
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

        # 拉取test分支代码
    - uses: actions/checkout@v1
      with:
        ref: test

      # 克隆私有的密钥库, 用于打包时签名. 该仓库为私有库
    - name: clone project keystore
      uses: actions/checkout@v2
      with:
        repository: aaronlinv/AndroidKeystore
        path: keystore
        token: ${{secrets.JuiceTimetable}}


    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Make Gradle executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build

    - name: Build apk package
      run: ./gradlew clean assembleRelease --stacktrace

      # 发行包

    - name: Upload apk to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.JuiceTimetable }}
        file: ./app/build/outputs/apk/release/app-release.apk
        asset_name: JuiceTimeTable ${{ steps.get_version.outputs.VERSION }} .apk
        tag: ${{ github.ref }}
        overwrite: true
    #        body: "This is my release package"

    # - name: Create Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.JuiceTimetable }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     draft: false
    #     prerelease: false

    # - name: Save name of our Artifact
    #   id: set-result-artifact
    #   run: |
    #     ARTIFACT_PATHNAME_APK=$(ls app/build/outputs/apk/release/*.apk | head -n 1)
    #     ARTIFACT_NAME_APK=$(basename $ARTIFACT_PATHNAME_APK)
    #     echo "ARTIFACT_NAME_APK is " ${ARTIFACT_NAME_APK}
    #     echo "ARTIFACT_PATHNAME_APK=${ARTIFACT_PATHNAME_APK}" >> $GITHUB_ENV
    #     echo "ARTIFACT_NAME_APK=${ARTIFACT_NAME_APK}" >> $GITHUB_ENV

    #   # - name: Upload our Artifact Assets
    # - name: uploadour Artifact Assets
    #   id: upload-release-asset
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.JuiceTimetable }}
    #   with:
    #     upload_url: https://github.com/aaronlinv/JuiceTimetable
    #     asset_path: ${{ env.ARTIFACT_PATHNAME_APK }}
    #     asset_name: ${{ env.ARTIFACT_NAME_APK }}
    #     asset_content_type: application/apk

    # - name: Create release and upload apk
    #   uses: underwindfall/create-release-with-debugapk@v2.0.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.JuiceTimetable }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     asset_path: ./app/build/outputs/apk/release/app-release.apk
    #     asset_name: Example.apk
    #     asset_content_type: application/apk


    # - name: Upload Release Asset
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.JuiceTimetable }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     # JuiceTimetable\app\build\outputs\apk\release\app-release.apk
    #     asset_path: ./app/build/outputs/apk/release/*.apk
    #     asset_name: JuiceTimetable.apk
    #     asset_content_type: application/apk

    # - name: Releasing using Hub
    #   uses: ShaunLWM/action-release-debugapk@master
    #   env:
    #    GITHUB_TOKEN: ${{ secrets.JuiceTimetable }} # github 项目secert key 名字必须和设置的一致， 并且token具有相关权限
    #    APP_FOLDER: app
    #    RELEASE_TITLE: New Build # 版本名称

